{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to gcs_lock_thing \u00b6 Basic mutex lock implementation with Google Cloud Storage with ttl and exponential backoff Free software: MIT license Documentation: https://connor-ps.github.io/gcs_lock_thing Features \u00b6 Basic mutex lock in GCP Credits \u00b6 This package was created with Cookiecutter and the giswqs/pypackage project template.","title":"Home"},{"location":"#welcome-to-gcs_lock_thing","text":"Basic mutex lock implementation with Google Cloud Storage with ttl and exponential backoff Free software: MIT license Documentation: https://connor-ps.github.io/gcs_lock_thing","title":"Welcome to gcs_lock_thing"},{"location":"#features","text":"Basic mutex lock in GCP","title":"Features"},{"location":"#credits","text":"This package was created with Cookiecutter and the giswqs/pypackage project template.","title":"Credits"},{"location":"changelog/","text":"Changelog \u00b6 v0.0.1 - Date \u00b6 Improvement : TBD New Features : TBD","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v001-date","text":"Improvement : TBD New Features : TBD","title":"v0.0.1 - Date"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/connor-ps/gcs_lock_thing/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with bug and help wanted is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with enhancement and help wanted is open to whoever wants to implement it. Write Documentation \u00b6 gcs-lock-thing could always use more documentation, whether as part of the official gcs-lock-thing docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/connor-ps/gcs_lock_thing/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up gcs_lock_thing for local development. Fork the gcs_lock_thing repo on GitHub. Clone your fork locally: 1 $ git clone git@github.com:your_name_here/gcs_lock_thing.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: 1 2 3 $ mkvirtualenv gcs_lock_thing $ cd gcs_lock_thing/ $ python setup.py develop Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox: 1 2 3 $ flake8 gcs_lock_thing tests $ python setup.py test or pytest $ tox To get flake8 and tox, just pip install them into your virtualenv. Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and for PyPy. Check https://github.com/connor-ps/gcs_lock_thing/pull_requests and make sure that the tests pass for all supported Python versions.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/connor-ps/gcs_lock_thing/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with bug and help wanted is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with enhancement and help wanted is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"gcs-lock-thing could always use more documentation, whether as part of the official gcs-lock-thing docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/connor-ps/gcs_lock_thing/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up gcs_lock_thing for local development. Fork the gcs_lock_thing repo on GitHub. Clone your fork locally: 1 $ git clone git@github.com:your_name_here/gcs_lock_thing.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: 1 2 3 $ mkvirtualenv gcs_lock_thing $ cd gcs_lock_thing/ $ python setup.py develop Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox: 1 2 3 $ flake8 gcs_lock_thing tests $ python setup.py test or pytest $ tox To get flake8 and tox, just pip install them into your virtualenv. Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and for PyPy. Check https://github.com/connor-ps/gcs_lock_thing/pull_requests and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"faq/","text":"FAQ \u00b6","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"gcs_lock_thing/","text":"gcs_lock_thing module \u00b6 Source code in gcs_lock_thing/lock.py class Client : def __init__ ( self , bucket , lock_file_path : str = \"gcs_lock_thing.txt\" , ttl = 30 , lock_id_prefix = 'default' ): self . bucket = bucket self . lock_file_path = lock_file_path self . ttl = ttl self . storage_client = storage . Client () self . bucket = self . storage_client . get_bucket ( bucket ) self . lock_file_path = lock_file_path self . blob = self . bucket . blob ( lock_file_path ) self . lock_id_prefix = lock_id_prefix self . lock_id = f \" { lock_id_prefix } - { uuid . uuid4 () } \" def lock ( self ) -> bool : \"\"\" Creates a lock with the specified GCS path. Returns: boolean on lock acquisition status \"\"\" print ( f \"Acquiring lock: { self . lock_file_path } \" ) try : self . _upload_lock_file () print ( \"Lock acquired: {} \" . format ( self . lock_file_path )) return True except PreconditionFailed : # this means lock already exists print ( f \"lock as its already in use, checking expiration: { self . lock_file_path } \" ) # check if lock is expired blob_metadata = self . bucket . get_blob ( self . lock_file_path ) . metadata expiration_timestamp = datetime . fromisoformat ( blob_metadata . get ( 'expiration_timestamp' )) if expiration_timestamp < datetime . utcnow (): # lock is stale so we bin it self . free_lock () self . lock () return True print ( \"lock is not stale so we wait....\" ) return False def free_lock ( self ) -> bool : \"\"\" Attempts to free lock Returns: boolean on success \"\"\" try : self . bucket . blob ( self . lock_file_path ) . delete () except NotFound : print ( \"lock already freed so do nothing\" ) print ( f \"Lock released: { self . lock_file_path } \" ) return True def wait_for_lock ( self , * backoff_args , ** backoff_kwargs ): \"\"\" Wait for lock using backoff predicate variables Args: *backoff_args: **backoff_kwargs: Returns: \"\"\" @backoff . on_predicate ( * backoff_args , ** backoff_kwargs ) def backoff_lock (): print ( f \"Backing off lock release: { self . lock_file_path } \" ) return self . lock () return backoff_lock () def wait_for_lock_expo ( self , base = 2 , factor = 0.5 , max_value = 10 , max_time = 60 , jitter = backoff . full_jitter , * args , ** kwargs ): \"\"\" A helper function for `wait_for_lock` that uses exponential backoff. :param base: waiting time (sec) is: factor * (base ** n) :param factor: waiting time (sec) is: factor * (base ** n) :param max_value: the ceiling value for retry time, in seconds :param max_time: total retry timeout, in seconds :param jitter: See backoff.on_predicate for details. Pass jitter=None for no jitter. :return: If the lock was acquired or not \"\"\" return self . wait_for_lock ( wait_gen = backoff . expo , base = base , factor = factor , max_value = max_value , max_time = max_time , jitter = jitter , * args , ** kwargs ) def _upload_lock_file ( self ) -> None : \"\"\" Upload dummy lock file with id and ttl metadata Returns: \"\"\" file = 'lock.txt' open ( file , 'a' ) . close () self . blob . upload_from_filename ( file , if_generation_match = 0 ) metadata = { 'expiration_timestamp' : datetime . utcnow () + timedelta ( seconds = self . ttl ), 'lock_id' : self . lock_id } self . blob . metadata = metadata self . blob . patch () free_lock ( self ) \u00b6 Attempts to free lock Returns: boolean on success Source code in gcs_lock_thing/lock.py def free_lock ( self ) -> bool : \"\"\" Attempts to free lock Returns: boolean on success \"\"\" try : self . bucket . blob ( self . lock_file_path ) . delete () except NotFound : print ( \"lock already freed so do nothing\" ) print ( f \"Lock released: { self . lock_file_path } \" ) return True lock ( self ) \u00b6 Creates a lock with the specified GCS path. Returns: boolean on lock acquisition status Source code in gcs_lock_thing/lock.py def lock ( self ) -> bool : \"\"\" Creates a lock with the specified GCS path. Returns: boolean on lock acquisition status \"\"\" print ( f \"Acquiring lock: { self . lock_file_path } \" ) try : self . _upload_lock_file () print ( \"Lock acquired: {} \" . format ( self . lock_file_path )) return True except PreconditionFailed : # this means lock already exists print ( f \"lock as its already in use, checking expiration: { self . lock_file_path } \" ) # check if lock is expired blob_metadata = self . bucket . get_blob ( self . lock_file_path ) . metadata expiration_timestamp = datetime . fromisoformat ( blob_metadata . get ( 'expiration_timestamp' )) if expiration_timestamp < datetime . utcnow (): # lock is stale so we bin it self . free_lock () self . lock () return True print ( \"lock is not stale so we wait....\" ) return False wait_for_lock ( self , * backoff_args , ** backoff_kwargs ) \u00b6 Wait for lock using backoff predicate variables Parameters: Name Type Description Default *backoff_args () **backoff_kwargs {} Source code in gcs_lock_thing/lock.py def wait_for_lock ( self , * backoff_args , ** backoff_kwargs ): \"\"\" Wait for lock using backoff predicate variables Args: *backoff_args: **backoff_kwargs: Returns: \"\"\" @backoff . on_predicate ( * backoff_args , ** backoff_kwargs ) def backoff_lock (): print ( f \"Backing off lock release: { self . lock_file_path } \" ) return self . lock () return backoff_lock () wait_for_lock_expo ( self , base = 2 , factor = 0.5 , max_value = 10 , max_time = 60 , jitter =< function full_jitter at 0x7f519fc33430 > , * args , ** kwargs ) \u00b6 A helper function for wait_for_lock that uses exponential backoff. :param base: waiting time (sec) is: factor * (base n) :param factor: waiting time (sec) is: factor * (base n) :param max_value: the ceiling value for retry time, in seconds :param max_time: total retry timeout, in seconds :param jitter: See backoff.on_predicate for details. Pass jitter=None for no jitter. :return: If the lock was acquired or not Source code in gcs_lock_thing/lock.py def wait_for_lock_expo ( self , base = 2 , factor = 0.5 , max_value = 10 , max_time = 60 , jitter = backoff . full_jitter , * args , ** kwargs ): \"\"\" A helper function for `wait_for_lock` that uses exponential backoff. :param base: waiting time (sec) is: factor * (base ** n) :param factor: waiting time (sec) is: factor * (base ** n) :param max_value: the ceiling value for retry time, in seconds :param max_time: total retry timeout, in seconds :param jitter: See backoff.on_predicate for details. Pass jitter=None for no jitter. :return: If the lock was acquired or not \"\"\" return self . wait_for_lock ( wait_gen = backoff . expo , base = base , factor = factor , max_value = max_value , max_time = max_time , jitter = jitter , * args , ** kwargs )","title":"gcs_lock_thing module"},{"location":"gcs_lock_thing/#gcs_lock_thing-module","text":"Source code in gcs_lock_thing/lock.py class Client : def __init__ ( self , bucket , lock_file_path : str = \"gcs_lock_thing.txt\" , ttl = 30 , lock_id_prefix = 'default' ): self . bucket = bucket self . lock_file_path = lock_file_path self . ttl = ttl self . storage_client = storage . Client () self . bucket = self . storage_client . get_bucket ( bucket ) self . lock_file_path = lock_file_path self . blob = self . bucket . blob ( lock_file_path ) self . lock_id_prefix = lock_id_prefix self . lock_id = f \" { lock_id_prefix } - { uuid . uuid4 () } \" def lock ( self ) -> bool : \"\"\" Creates a lock with the specified GCS path. Returns: boolean on lock acquisition status \"\"\" print ( f \"Acquiring lock: { self . lock_file_path } \" ) try : self . _upload_lock_file () print ( \"Lock acquired: {} \" . format ( self . lock_file_path )) return True except PreconditionFailed : # this means lock already exists print ( f \"lock as its already in use, checking expiration: { self . lock_file_path } \" ) # check if lock is expired blob_metadata = self . bucket . get_blob ( self . lock_file_path ) . metadata expiration_timestamp = datetime . fromisoformat ( blob_metadata . get ( 'expiration_timestamp' )) if expiration_timestamp < datetime . utcnow (): # lock is stale so we bin it self . free_lock () self . lock () return True print ( \"lock is not stale so we wait....\" ) return False def free_lock ( self ) -> bool : \"\"\" Attempts to free lock Returns: boolean on success \"\"\" try : self . bucket . blob ( self . lock_file_path ) . delete () except NotFound : print ( \"lock already freed so do nothing\" ) print ( f \"Lock released: { self . lock_file_path } \" ) return True def wait_for_lock ( self , * backoff_args , ** backoff_kwargs ): \"\"\" Wait for lock using backoff predicate variables Args: *backoff_args: **backoff_kwargs: Returns: \"\"\" @backoff . on_predicate ( * backoff_args , ** backoff_kwargs ) def backoff_lock (): print ( f \"Backing off lock release: { self . lock_file_path } \" ) return self . lock () return backoff_lock () def wait_for_lock_expo ( self , base = 2 , factor = 0.5 , max_value = 10 , max_time = 60 , jitter = backoff . full_jitter , * args , ** kwargs ): \"\"\" A helper function for `wait_for_lock` that uses exponential backoff. :param base: waiting time (sec) is: factor * (base ** n) :param factor: waiting time (sec) is: factor * (base ** n) :param max_value: the ceiling value for retry time, in seconds :param max_time: total retry timeout, in seconds :param jitter: See backoff.on_predicate for details. Pass jitter=None for no jitter. :return: If the lock was acquired or not \"\"\" return self . wait_for_lock ( wait_gen = backoff . expo , base = base , factor = factor , max_value = max_value , max_time = max_time , jitter = jitter , * args , ** kwargs ) def _upload_lock_file ( self ) -> None : \"\"\" Upload dummy lock file with id and ttl metadata Returns: \"\"\" file = 'lock.txt' open ( file , 'a' ) . close () self . blob . upload_from_filename ( file , if_generation_match = 0 ) metadata = { 'expiration_timestamp' : datetime . utcnow () + timedelta ( seconds = self . ttl ), 'lock_id' : self . lock_id } self . blob . metadata = metadata self . blob . patch ()","title":"gcs_lock_thing module"},{"location":"gcs_lock_thing/#gcs_lock_thing.lock.Client.free_lock","text":"Attempts to free lock Returns: boolean on success Source code in gcs_lock_thing/lock.py def free_lock ( self ) -> bool : \"\"\" Attempts to free lock Returns: boolean on success \"\"\" try : self . bucket . blob ( self . lock_file_path ) . delete () except NotFound : print ( \"lock already freed so do nothing\" ) print ( f \"Lock released: { self . lock_file_path } \" ) return True","title":"free_lock()"},{"location":"gcs_lock_thing/#gcs_lock_thing.lock.Client.lock","text":"Creates a lock with the specified GCS path. Returns: boolean on lock acquisition status Source code in gcs_lock_thing/lock.py def lock ( self ) -> bool : \"\"\" Creates a lock with the specified GCS path. Returns: boolean on lock acquisition status \"\"\" print ( f \"Acquiring lock: { self . lock_file_path } \" ) try : self . _upload_lock_file () print ( \"Lock acquired: {} \" . format ( self . lock_file_path )) return True except PreconditionFailed : # this means lock already exists print ( f \"lock as its already in use, checking expiration: { self . lock_file_path } \" ) # check if lock is expired blob_metadata = self . bucket . get_blob ( self . lock_file_path ) . metadata expiration_timestamp = datetime . fromisoformat ( blob_metadata . get ( 'expiration_timestamp' )) if expiration_timestamp < datetime . utcnow (): # lock is stale so we bin it self . free_lock () self . lock () return True print ( \"lock is not stale so we wait....\" ) return False","title":"lock()"},{"location":"gcs_lock_thing/#gcs_lock_thing.lock.Client.wait_for_lock","text":"Wait for lock using backoff predicate variables Parameters: Name Type Description Default *backoff_args () **backoff_kwargs {} Source code in gcs_lock_thing/lock.py def wait_for_lock ( self , * backoff_args , ** backoff_kwargs ): \"\"\" Wait for lock using backoff predicate variables Args: *backoff_args: **backoff_kwargs: Returns: \"\"\" @backoff . on_predicate ( * backoff_args , ** backoff_kwargs ) def backoff_lock (): print ( f \"Backing off lock release: { self . lock_file_path } \" ) return self . lock () return backoff_lock ()","title":"wait_for_lock()"},{"location":"gcs_lock_thing/#gcs_lock_thing.lock.Client.wait_for_lock_expo","text":"A helper function for wait_for_lock that uses exponential backoff. :param base: waiting time (sec) is: factor * (base n) :param factor: waiting time (sec) is: factor * (base n) :param max_value: the ceiling value for retry time, in seconds :param max_time: total retry timeout, in seconds :param jitter: See backoff.on_predicate for details. Pass jitter=None for no jitter. :return: If the lock was acquired or not Source code in gcs_lock_thing/lock.py def wait_for_lock_expo ( self , base = 2 , factor = 0.5 , max_value = 10 , max_time = 60 , jitter = backoff . full_jitter , * args , ** kwargs ): \"\"\" A helper function for `wait_for_lock` that uses exponential backoff. :param base: waiting time (sec) is: factor * (base ** n) :param factor: waiting time (sec) is: factor * (base ** n) :param max_value: the ceiling value for retry time, in seconds :param max_time: total retry timeout, in seconds :param jitter: See backoff.on_predicate for details. Pass jitter=None for no jitter. :return: If the lock was acquired or not \"\"\" return self . wait_for_lock ( wait_gen = backoff . expo , base = base , factor = factor , max_value = max_value , max_time = max_time , jitter = jitter , * args , ** kwargs )","title":"wait_for_lock_expo()"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install gcs-lock-thing, run this command in your terminal: 1 pip install gcs_lock_thing This is the preferred method to install gcs-lock-thing, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From sources \u00b6 The sources for gcs-lock-thing can be downloaded from the Github repo. You can clone the public repository: 1 git clone git://github.com/connor-ps/gcs_lock_thing","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install gcs-lock-thing, run this command in your terminal: 1 pip install gcs_lock_thing This is the preferred method to install gcs-lock-thing, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-sources","text":"The sources for gcs-lock-thing can be downloaded from the Github repo. You can clone the public repository: 1 git clone git://github.com/connor-ps/gcs_lock_thing","title":"From sources"},{"location":"usage/","text":"Usage \u00b6 To use gcs-lock-thing in a project: 1 2 3 4 5 6 7 8 9 10 11 12 import gcs_lock_thing.lock as gcs public_bucket_path = \"data-trf-test-mutex-lock\" lock_file_name = \"test-lock.txt\" ttl = 2 client = gcs . Client ( bucket = public_bucket_path , lock_file_path = lock_file_name , ttl = ttl ) # get lock status = client . lock () # free lock client . free_lock ()","title":"Usage"},{"location":"usage/#usage","text":"To use gcs-lock-thing in a project: 1 2 3 4 5 6 7 8 9 10 11 12 import gcs_lock_thing.lock as gcs public_bucket_path = \"data-trf-test-mutex-lock\" lock_file_name = \"test-lock.txt\" ttl = 2 client = gcs . Client ( bucket = public_bucket_path , lock_file_path = lock_file_name , ttl = ttl ) # get lock status = client . lock () # free lock client . free_lock ()","title":"Usage"}]}